/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as appRouteImport } from './routes/(app)/route'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as appIndexImport } from './routes/(app)/index'
import { Route as authResetPasswordImport } from './routes/(auth)/reset-password'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as authForgotPasswordImport } from './routes/(auth)/forgot-password'
import { Route as appSupportImport } from './routes/(app)/support'
import { Route as appAuthenticatedImport } from './routes/(app)/_authenticated'
import { Route as AdminUsersIndexImport } from './routes/admin/users/index'
import { Route as appListsIndexImport } from './routes/(app)/lists/index'
import { Route as AdminUsersNameImport } from './routes/admin/users/$name'
import { Route as appAuthenticatedProfileImport } from './routes/(app)/_authenticated.profile'

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const appRouteRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const appIndexRoute = appIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)

const authResetPasswordRoute = authResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authRouteRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const authForgotPasswordRoute = authForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)

const appSupportRoute = appSupportImport.update({
  id: '/support',
  path: '/support',
  getParentRoute: () => appRouteRoute,
} as any)

const appAuthenticatedRoute = appAuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => appRouteRoute,
} as any)

const AdminUsersIndexRoute = AdminUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const appListsIndexRoute = appListsIndexImport.update({
  id: '/lists/',
  path: '/lists/',
  getParentRoute: () => appRouteRoute,
} as any)

const AdminUsersNameRoute = AdminUsersNameImport.update({
  id: '/users/$name',
  path: '/users/$name',
  getParentRoute: () => AdminRouteRoute,
} as any)

const appAuthenticatedProfileRoute = appAuthenticatedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => appAuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_authenticated': {
      id: '/(app)/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appAuthenticatedImport
      parentRoute: typeof appRouteImport
    }
    '/(app)/support': {
      id: '/(app)/support'
      path: '/support'
      fullPath: '/support'
      preLoaderRoute: typeof appSupportImport
      parentRoute: typeof appRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordImport
      parentRoute: typeof authRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof appRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/(app)/_authenticated/profile': {
      id: '/(app)/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appAuthenticatedProfileImport
      parentRoute: typeof appAuthenticatedImport
    }
    '/admin/users/$name': {
      id: '/admin/users/$name'
      path: '/users/$name'
      fullPath: '/admin/users/$name'
      preLoaderRoute: typeof AdminUsersNameImport
      parentRoute: typeof AdminRouteImport
    }
    '/(app)/lists/': {
      id: '/(app)/lists/'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof appListsIndexImport
      parentRoute: typeof appRouteImport
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexImport
      parentRoute: typeof AdminRouteImport
    }
  }
}

// Create and export the route tree

interface appAuthenticatedRouteChildren {
  appAuthenticatedProfileRoute: typeof appAuthenticatedProfileRoute
}

const appAuthenticatedRouteChildren: appAuthenticatedRouteChildren = {
  appAuthenticatedProfileRoute: appAuthenticatedProfileRoute,
}

const appAuthenticatedRouteWithChildren =
  appAuthenticatedRoute._addFileChildren(appAuthenticatedRouteChildren)

interface appRouteRouteChildren {
  appAuthenticatedRoute: typeof appAuthenticatedRouteWithChildren
  appSupportRoute: typeof appSupportRoute
  appIndexRoute: typeof appIndexRoute
  appListsIndexRoute: typeof appListsIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appAuthenticatedRoute: appAuthenticatedRouteWithChildren,
  appSupportRoute: appSupportRoute,
  appIndexRoute: appIndexRoute,
  appListsIndexRoute: appListsIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  authResetPasswordRoute: authResetPasswordRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
  AdminUsersNameRoute: typeof AdminUsersNameRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
  AdminUsersNameRoute: AdminUsersNameRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '': typeof appAuthenticatedRouteWithChildren
  '/support': typeof appSupportRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/reset-password': typeof authResetPasswordRoute
  '/admin/': typeof AdminIndexRoute
  '/profile': typeof appAuthenticatedProfileRoute
  '/admin/users/$name': typeof AdminUsersNameRoute
  '/lists': typeof appListsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '': typeof appAuthenticatedRouteWithChildren
  '/support': typeof appSupportRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/reset-password': typeof authResetPasswordRoute
  '/admin': typeof AdminIndexRoute
  '/profile': typeof appAuthenticatedProfileRoute
  '/admin/users/$name': typeof AdminUsersNameRoute
  '/lists': typeof appListsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)': typeof authRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/(app)/_authenticated': typeof appAuthenticatedRouteWithChildren
  '/(app)/support': typeof appSupportRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/(app)/': typeof appIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/(app)/_authenticated/profile': typeof appAuthenticatedProfileRoute
  '/admin/users/$name': typeof AdminUsersNameRoute
  '/(app)/lists/': typeof appListsIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | ''
    | '/support'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/admin/'
    | '/profile'
    | '/admin/users/$name'
    | '/lists'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/support'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/admin'
    | '/profile'
    | '/admin/users/$name'
    | '/lists'
    | '/admin/users'
  id:
    | '__root__'
    | '/(app)'
    | '/(auth)'
    | '/admin'
    | '/(app)/_authenticated'
    | '/(app)/support'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(auth)/reset-password'
    | '/(app)/'
    | '/admin/'
    | '/(app)/_authenticated/profile'
    | '/admin/users/$name'
    | '/(app)/lists/'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  authRouteRoute: typeof authRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  authRouteRoute: authRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)",
        "/(auth)",
        "/admin"
      ]
    },
    "/(app)": {
      "filePath": "(app)/route.tsx",
      "children": [
        "/(app)/_authenticated",
        "/(app)/support",
        "/(app)/",
        "/(app)/lists/"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/forgot-password",
        "/(auth)/login",
        "/(auth)/register",
        "/(auth)/reset-password"
      ]
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/",
        "/admin/users/$name",
        "/admin/users/"
      ]
    },
    "/(app)/_authenticated": {
      "filePath": "(app)/_authenticated.tsx",
      "parent": "/(app)",
      "children": [
        "/(app)/_authenticated/profile"
      ]
    },
    "/(app)/support": {
      "filePath": "(app)/support.tsx",
      "parent": "/(app)"
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/reset-password": {
      "filePath": "(auth)/reset-password.tsx",
      "parent": "/(auth)"
    },
    "/(app)/": {
      "filePath": "(app)/index.tsx",
      "parent": "/(app)"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/(app)/_authenticated/profile": {
      "filePath": "(app)/_authenticated.profile.tsx",
      "parent": "/(app)/_authenticated"
    },
    "/admin/users/$name": {
      "filePath": "admin/users/$name.tsx",
      "parent": "/admin"
    },
    "/(app)/lists/": {
      "filePath": "(app)/lists/index.tsx",
      "parent": "/(app)"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.tsx",
      "parent": "/admin"
    }
  }
}
ROUTE_MANIFEST_END */
