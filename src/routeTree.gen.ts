/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin/route'
import { Route as appRouteImport } from './routes/(app)/route'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as appIndexImport } from './routes/(app)/index'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as authForgotPasswordImport } from './routes/(auth)/forgot-password'
import { Route as appAboutImport } from './routes/(app)/about'
import { Route as appListsIndexImport } from './routes/(app)/lists/index'

// Create/Update Routes

const AdminRouteRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const appRouteRoute = appRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRouteRoute,
} as any)

const appIndexRoute = appIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authForgotPasswordRoute = authForgotPasswordImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const appAboutRoute = appAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => appRouteRoute,
} as any)

const appListsIndexRoute = appListsIndexImport.update({
  id: '/lists/',
  path: '/lists/',
  getParentRoute: () => appRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/(app)/about': {
      id: '/(app)/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appAboutImport
      parentRoute: typeof appRouteImport
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexImport
      parentRoute: typeof appRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminRouteImport
    }
    '/(app)/lists/': {
      id: '/(app)/lists/'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof appListsIndexImport
      parentRoute: typeof appRouteImport
    }
  }
}

// Create and export the route tree

interface appRouteRouteChildren {
  appAboutRoute: typeof appAboutRoute
  appIndexRoute: typeof appIndexRoute
  appListsIndexRoute: typeof appListsIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appAboutRoute: appAboutRoute,
  appIndexRoute: appIndexRoute,
  appListsIndexRoute: appListsIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

interface AdminRouteRouteChildren {
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/admin': typeof AdminRouteRouteWithChildren
  '/about': typeof appAboutRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/admin/': typeof AdminIndexRoute
  '/lists': typeof appListsIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof appAboutRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/': typeof appIndexRoute
  '/admin': typeof AdminIndexRoute
  '/lists': typeof appListsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/admin': typeof AdminRouteRouteWithChildren
  '/(app)/about': typeof appAboutRoute
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(app)/': typeof appIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/(app)/lists/': typeof appListsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/admin/'
    | '/lists'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/'
    | '/admin'
    | '/lists'
  id:
    | '__root__'
    | '/(app)'
    | '/admin'
    | '/(app)/about'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(app)/'
    | '/admin/'
    | '/(app)/lists/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)",
        "/admin",
        "/(auth)/forgot-password",
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/(app)": {
      "filePath": "(app)/route.tsx",
      "children": [
        "/(app)/about",
        "/(app)/",
        "/(app)/lists/"
      ]
    },
    "/admin": {
      "filePath": "admin/route.tsx",
      "children": [
        "/admin/"
      ]
    },
    "/(app)/about": {
      "filePath": "(app)/about.tsx",
      "parent": "/(app)"
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/(app)/": {
      "filePath": "(app)/index.tsx",
      "parent": "/(app)"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/(app)/lists/": {
      "filePath": "(app)/lists/index.tsx",
      "parent": "/(app)"
    }
  }
}
ROUTE_MANIFEST_END */
